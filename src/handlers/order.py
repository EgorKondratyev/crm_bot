from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from src.core.bot.bot import dp
from src.core.database.models.cargo import ShippingType, TransportType
from src.dao.cargo import CargoDAO
from src.dao.user import UserDAO
from src.keyboards.inline.order import (
    get_shipping_type_buttons,
    get_transport_type_buttons,
)
from src.keyboards.markup import get_main_buttons_for_client
from src.states.order import PlacingOrderFSM


async def placing_order_choice_shipping_handler(message: Message):
    await PlacingOrderFSM.get_shipping.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏", reply_markup=get_shipping_type_buttons()
    )


async def placing_order_choice_transport_handler(
    callback: CallbackQuery, state: FSMContext
):
    shipping_type = callback.data.split(":")[1]
    async with state.proxy() as data:
        data["shipping_type"] = shipping_type
    await callback.answer("–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω")
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏: <b>{ShippingType.get_by_key(key=shipping_type)}</b>",
        parse_mode="html",
    )

    await PlacingOrderFSM.get_transport.set()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", reply_markup=get_transport_type_buttons()
    )


async def placing_order_input_weight_handler(
    callback: CallbackQuery, state: FSMContext
):
    transport_type = callback.data.split(":")[1]
    async with state.proxy() as data:
        data["transport_type"] = transport_type
        shipping_type = data["shipping_type"]
    await callback.answer("–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω")
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: <b>{TransportType.get_by_key(key=transport_type)}</b>",
        parse_mode="html",
    )

    await PlacingOrderFSM.get_weight.set()
    if shipping_type == "PASSENGER":
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:")
    else:
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥:")


async def placing_order_input_width_handler(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
    except Exception as e:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞:")
        return
    if weight > 10000:
        await message.answer("–í–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10000–∫–≥\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞:")
        return
    async with state.proxy() as data:
        data["weight"] = weight

    await PlacingOrderFSM.get_width.set()
    await message.answer(
        "<b>–ù–∞–ø–∏—à–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö:</b>\n\n"
        "*–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í–≤–µ–¥–∏—Ç–µ <code>0</code>, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        parse_mode="html",
    )


async def placing_order_input_height_handler(message: Message, state: FSMContext):
    try:
        width = int(message.text)
    except Exception as e:
        await message.answer(
            "–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º\n\n–ù–∞–ø–∏—à–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≥—Ä—É–∑–∞:"
        )
        return
    async with state.proxy() as data:
        data["width"] = width

    await PlacingOrderFSM.get_height.set()
    await message.answer(
        "<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö:</b>\n\n"
        "*–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í–≤–µ–¥–∏—Ç–µ <code>0</code>, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        parse_mode="html",
    )


async def placing_order_input_destination_address_handler(
    message: Message, state: FSMContext
):
    try:
        height = int(message.text)
    except Exception as e:
        await message.answer(
            "–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≥—Ä—É–∑–∞:"
        )
        return
    async with state.proxy() as data:
        data["height"] = height

    await PlacingOrderFSM.get_destination_address.set()
    await message.answer(
        "<b>–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–∑–∞: </b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> *190000, –†–æ—Å—Å–∏—è, –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä-–Ω, –ù–µ–≤—Å–∫–∏–π –ø—Ä-—Ç, –¥. 100, –ª–∏—Ç. –ê, –æ—Ñ. 305*\n",
        parse_mode="html",
    )


async def placing_order_input_shipping_address_handler(
    message: Message, state: FSMContext
):
    destination_address = message.text
    if len(destination_address) >= 500:
        await message.answer(
            "–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
            "<b>–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–∑–∞: </b>",
            parse_mode="html",
        )
        return
    async with state.proxy() as data:
        data["destination_address"] = destination_address

    await PlacingOrderFSM.get_shipping_address.set()
    await message.answer(
        "<b>–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–∑–∞: </b>\n\n",
        parse_mode="html",
    )


async def placing_order_finished_handler(message: Message, state: FSMContext):
    shipping_address = message.text
    if len(shipping_address) >= 500:
        await message.answer(
            "–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
            "<b>–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–∑–∞: </b>",
            parse_mode="html",
        )
        return

    async with state.proxy() as data:
        destination_address = data["destination_address"]
        height = data["height"]
        width = data["width"]
        weight = data["weight"]
        transport_type = data["transport_type"]
        shipping_type = data["shipping_type"]
    await state.finish()

    user = await UserDAO.get_by_telegram_id(telegram_id=message.from_user.id)
    await CargoDAO.add(
        shipping_address=shipping_address,
        destination_address=destination_address,
        height=height,
        width=width,
        weight=weight,
        transport=transport_type,
        shipping=shipping_type,
        user_id=user.id,
    )

    await message.answer(
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞üöö‚ú®! "
        "–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞."
    )
    await message.answer(
        "¬´–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª.",
        reply_markup=get_main_buttons_for_client(),
    )


def register_order_handlers():
    dp.register_message_handler(
        placing_order_choice_shipping_handler,
        Text(equals="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"),
    )
    dp.register_callback_query_handler(
        placing_order_choice_transport_handler,
        Text(startswith="order_shipping:"),
        state=PlacingOrderFSM.get_shipping,
    )
    dp.register_callback_query_handler(
        placing_order_input_weight_handler,
        Text(startswith="order_transport:"),
        state=PlacingOrderFSM.get_transport,
    )
    dp.register_message_handler(
        placing_order_input_width_handler,
        state=PlacingOrderFSM.get_weight,
    )
    dp.register_message_handler(
        placing_order_input_height_handler,
        state=PlacingOrderFSM.get_width,
    )
    dp.register_message_handler(
        placing_order_input_destination_address_handler,
        state=PlacingOrderFSM.get_height,
    )
    dp.register_message_handler(
        placing_order_input_shipping_address_handler,
        state=PlacingOrderFSM.get_destination_address,
    )
    dp.register_message_handler(
        placing_order_finished_handler,
        state=PlacingOrderFSM.get_shipping_address,
    )
