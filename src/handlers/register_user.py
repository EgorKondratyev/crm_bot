from aiogram import types
from aiogram.dispatcher import FSMContext

from src.core.bot.bot import dp
from src.core.database.models.user import BusinessRelationshipType
from src.dao.user import UserDAO
from src.keyboards.inline.stop import create_keyboard_stop_fsm
from src.keyboards.markup import get_business_relationship_keyboard
from src.states.register import RegisterFSM


async def contact_handler(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    async with state.proxy() as data:
        data["phone_number"] = phone_number
    await message.answer(
        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: <b>{phone_number}</b>\n\n"
        f"*–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        parse_mode="html",
        reply_markup=get_business_relationship_keyboard(),
    )
    await RegisterFSM.get_company_type.set()
    await message.answer(
        f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤ —É–∫–∞–∂–∏—Ç–µ <b>—Ç–∏–ø –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏</b> –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá",
        reply_markup=create_keyboard_stop_fsm(
            text_stop_button="üõë–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏üõë"
        ),
        parse_mode="html",
    )


async def company_type_handler(message: types.Message, state: FSMContext):
    company_type = message.text
    if not any(company_type == item.value for item in BusinessRelationshipType):
        await message.answer(
            "–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            reply_markup=create_keyboard_stop_fsm(
                text_stop_button="üõë–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏üõë"
            ),
        )
        return
    async with state.proxy() as data:
        phone_number = data["phone_number"]

    await UserDAO.add(
        telegram_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        surname=message.from_user.username,
        phone_number=phone_number,
        business_type=company_type,
    )
    await state.finish()
    await message.answer("üéä")
    await message.answer(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞"
    )


def register_register_handlers():
    dp.register_message_handler(
        contact_handler,
        content_types=types.ContentType.CONTACT,
        state=RegisterFSM.get_phone,
    )
    dp.register_message_handler(
        company_type_handler,
        state=RegisterFSM.get_company_type,
    )
